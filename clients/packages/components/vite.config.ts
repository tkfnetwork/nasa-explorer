import react from '@vitejs/plugin-react';
import { execSync } from 'child_process';
import { sync as commandExists } from 'command-exists';
import {
  existsSync,
  readFileSync,
  renameSync,
  rmSync,
  writeFileSync,
} from 'fs';
import path from 'path';
import preserveDirectives from 'rollup-preserve-directives';
import tailwindcss from '@tailwindcss/vite';
import type { PluginOption } from 'vite';
import { defineConfig } from 'vite';
import { patchCssModules } from 'vite-css-modules';
import dts from 'vite-plugin-dts';
import { externalizeDeps } from 'vite-plugin-externalize-deps';
import svgr from 'vite-plugin-svgr';
import { coverageConfigDefaults } from 'vitest/config';

const buildName = 'build';
const distName = 'dist';
const srcName = 'src';

const buildPath = path.resolve(__dirname, buildName);
const distPath = path.resolve(__dirname, distName);
const srcPath = path.resolve(__dirname, srcName);

function postBuild(): PluginOption {
  return {
    name: 'custom-post-build',
    closeBundle() {
      console.log('🖌️ Combining CSS...');

      // CSS needs to be combined between whats generated by Vite via CSS modules
      // and what is generated by the tailwind cli
      execSync('pnpm run build:css');

      const indexCssPath = path.resolve(buildPath, 'index.css');

      const indexCss = existsSync(indexCssPath)
        ? readFileSync(path.resolve(buildPath, 'index.css'), 'utf-8')
        : '';
      const twCss = readFileSync(path.resolve(buildPath, 'tw.css'), 'utf-8');

      writeFileSync(
        path.resolve(buildPath, 'index.css'),
        twCss.concat(indexCss)
      );
      rmSync(path.resolve(buildPath, 'tw.css'));

      console.log('📥 Moving build to dist...');

      if (commandExists('rsync')) {
        // This simulates an incremental build by building into a build folder
        // and rsyncing into the dist folder only the changed files
        // since vite will do a full rebuild for every change when in watch mode
        execSync(`rsync -avc ${buildPath}/ ${distPath}/`, {
          stdio: 'inherit',
        });

        rmSync(buildPath, {
          recursive: true,
          force: true,
        });
      } else {
        console.warn('rsync not found, falling back to hard copy');

        if (existsSync(distPath)) {
          rmSync(distPath, {
            recursive: true,
            force: true,
          });
        }

        renameSync(buildPath, distPath);
      }
    },
  };
}

export default defineConfig(({ mode }) => ({
  plugins: [
    externalizeDeps({
      deps: true,
      peerDeps: true,
    }),
    preserveDirectives(),
    patchCssModules(),
    react(),
    dts({
      include: [srcName],
      exclude: ['**/mocks/*', '**/*.test.tsx', '**/*.stories.tsx'],
      outDir: buildName,
    }),
    postBuild(),
    tailwindcss(),
    svgr(),
  ],
  resolve: {
    alias: {
      '@': srcPath,
    },
  },
  build: {
    lib: {
      entry: path.resolve(srcPath, 'index.ts'),
      name: '@ne/components',
      fileName: 'index',
      formats: ['es'],
    },
    sourcemap: true,
    minify: mode !== 'development',
    rollupOptions: {
      onwarn(warning, warn) {
        // Ignore sourcemap warnings
        if (warning.code === 'SOURCEMAP_BROKEN') {
          return;
        }

        warn(warning);
      },
      output: {
        globals: {
          react: 'React',
          'react-dom': 'ReactDOM',
          'react/jsx-runtime': 'jsxRuntime',
        },
        preserveModules: true,
        preserveModulesRoot: 'src',
        dir: buildName,
        entryFileNames: '[name].js',
        chunkFileNames: '[name]-[hash].[ext]',
        inlineDynamicImports: false,
        interop: 'auto',
      },
    },
  },
  test: {
    environment: 'happy-dom',
    setupFiles: ['vitest-setup.ts'],
    coverage: {
      provider: 'v8',
      exclude: [
        '**/_templates/**',
        '**/build/**',
        '**/dist/**',
        '**/index.ts',
        '**/*.types.ts',
        '**/*.stories.tsx',
        ...coverageConfigDefaults.exclude,
      ],
      include: ['**/src/**/*'],
    },
  },
}));
